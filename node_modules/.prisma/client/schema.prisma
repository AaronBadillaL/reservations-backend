// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  name               String
  password           String
  role               String // "PROFESSIONAL" or "CLIENT"
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  availableSchedules AvailableSchedule[]
  bookingsAsPro      Booking[]           @relation("ProfessionalBookings")
  bookingsAsClient   Booking[]           @relation("ClientBookings")
  notifications      Notification[]
}

model AvailableSchedule {
  id             Int      @id @default(autoincrement())
  date           DateTime
  startTime      DateTime
  endTime        DateTime
  isBooked       Boolean  @default(false)
  professional   User     @relation(fields: [professionalId], references: [id])
  professionalId Int
  booking        Booking?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Booking {
  id             Int               @id @default(autoincrement())
  schedule       AvailableSchedule @relation(fields: [scheduleId], references: [id])
  scheduleId     Int               @unique
  professional   User              @relation("ProfessionalBookings", fields: [professionalId], references: [id])
  professionalId Int
  client         User              @relation("ClientBookings", fields: [clientId], references: [id])
  clientId       Int
  status         String // "PENDING", "CONFIRMED", "CANCELLED"
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
